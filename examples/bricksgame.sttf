{"links":[{"end":"RenderOutput","filter":"Linear","slot":0,"start":"Image","wrapMode":"Repeat"},{"end":"Buffer A","filter":"Nearest","slot":1,"start":"Keyboard","wrapMode":"Clamp"},{"end":"Image","filter":"Linear","slot":0,"start":"Buffer A","wrapMode":"Clamp"},{"end":"Buffer A","filter":"Linear","slot":0,"start":"LastFrame","wrapMode":"Clamp"}],"metadata":{"Author":"iq","Description":"Use arrow keys or the mouse to move the paddle. Use space to restart. This shader uses the new Multipass system","Name":"Bricks Game","ShaderToyURL":"https://www.shadertoy.com/view/MddGzf"},"nodes":[{"class":"RenderOutput","name":"RenderOutput"},{"class":"GLSLShader","name":"Image","source":"// Created by inigo quilez - iq/2016\n// https://www.youtube.com/c/InigoQuilez\n// https://iquilezles.org/\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n\n//\n// Game rendering. Regular 2D distance field rendering.\n//\n\n\n// storage register/texel addresses\nconst ivec2 txBallPosVel = ivec2(0,0);\nconst ivec2 txPaddlePos  = ivec2(1,0);\nconst ivec2 txPoints     = ivec2(2,0);\nconst ivec2 txState      = ivec2(3,0);\nconst ivec2 txLastHit    = ivec2(4,0);\nconst ivec4 txBricks     = ivec4(0,1,13,12);\n\nconst float ballRadius = 0.035;\nconst float paddleSize = 0.30;\nconst float paddleWidth = 0.06;\nconst float paddlePosY  = -0.90;\nconst float brickW = 2.0/13.0;\nconst float brickH = 1.0/15.0;\n\n//----------------\n\nconst vec2 shadowOffset = vec2(-0.03,0.03);\n\n//=================================================================================================\n// distance functions\n//=================================================================================================\n\nfloat udSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat udHorizontalSegment( in vec2 p, in float xa, in float xb, in float y )\n{\n    vec2 pa = p - vec2(xa,y);\n    float ba = xb - xa;\n    pa.x -= ba*clamp( pa.x/ba, 0.0, 1.0 );\n    return length( pa );\n}\n\nfloat udRoundBox( in vec2 p, in vec2 c, in vec2 b, in float r )\n{\n  return length(max(abs(p-c)-b,0.0))-r;\n}\n\n//=================================================================================================\n// utility\n//=================================================================================================\n\nfloat hash1( in float n )\n{\n    return fract(sin(n)*138.5453123);\n}\n\n// Digit data by P_Malin (https://www.shadertoy.com/view/4sf3RN)\nconst int[] font = int[](0x75557, 0x22222, 0x74717, 0x74747, 0x11574, 0x71747, 0x71757, 0x74444, 0x75757, 0x75747);\nconst int[] powers = int[](1, 10, 100, 1000, 10000);\nint PrintInt( in vec2 uv, in int value )\n{\n    const int maxDigits = 3;\n    if( abs(uv.y-0.5)<0.5 )\n    {\n        int iu = int(floor(uv.x));\n        if( iu>=0 && iu<maxDigits )\n        {\n            int n = (value/powers[maxDigits-iu-1]) % 10;\n            uv.x = fract(uv.x);//(uv.x-float(iu)); \n            ivec2 p = ivec2(floor(uv*vec2(4.0,5.0)));\n            return (font[n] >> (p.x+p.y*4)) & 1;\n        }\n    }\n    return 0;\n}\n\n//=================================================================================================\n\nfloat doBrick( in ivec2 id, out vec3 col, out float glo, out vec2 cen )\n{\n    float alp = 0.0;\n    \n    glo = 0.0;\n    col = vec3(0.0);\n    cen = vec2(0.0);\n    \n    if( id.x>0 && id.x<13 && id.y>=0 && id.y<12 )\n    {\n        vec2 brickHere = texelFetch( iChannel0, txBricks.xy+id, 0 ).xy;\n\n        alp = 1.0;\n        glo = 0.0;\n        if( brickHere.x < 0.5 )\n        {\n            float t = max(0.0,iTime-brickHere.y-0.1);\n            alp = exp(-2.0*t );\n            glo = exp(-4.0*t );\n        }\n         \n        if( alp>0.001 )\n        {\n            float fid = hash1( float(id.x*3 + id.y*16) );\n            col = vec3(0.5,0.5,0.6) + 0.4*sin( fid*2.0 + 4.5 + vec3(0.0,1.0,1.0) );\n            if( hash1(fid*13.1)>0.85 )\n            {\n                col = 1.0 - 0.9*col;\n                col.xy += 0.2;\n            }\n        }\n        \n        cen = vec2( -1.0 + float(id.x)*brickW + 0.5*brickW,\n                     1.0 - float(id.y)*brickH - 0.5*brickH );\n    }\n\n    return alp;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0*fragCoord-iResolution.xy) / iResolution.y;\n    float px = 2.0/iResolution.y;\n    \n    //------------------------\n    // load game state\n    //------------------------\n    vec2  ballPos   = texelFetch( iChannel0, txBallPosVel, 0 ).xy;\n    float paddlePos = texelFetch( iChannel0, txPaddlePos, 0 ).x;\n    float points    = texelFetch( iChannel0, txPoints, 0 ).x;\n    float state     = texelFetch( iChannel0, txState, 0 ).x;\n    vec3  lastHit   = texelFetch( iChannel0, txLastHit, 0 ).xyz;\n\n    \n    //------------------------\n    // draw\n    //------------------------\n    vec3 col = vec3(0.0);\n    vec3 emi = vec3(0.0);\n    \n    // board\n    {\n        col = 0.6*vec3(0.4,0.6,0.7)*(1.0-0.4*length( uv ));\n        col *= 1.0 - 0.1*smoothstep( 0.0,1.0,sin(uv.x*80.0)*sin(uv.y*80.0))*(1.0 - smoothstep( 1.0, 1.01, abs(uv.x) ) );\n    }    \n\n    // bricks\n    {\n        float b = brickW*0.17;\n\n        // soft shadow\n        {\n            vec2 st = uv + shadowOffset;\n            ivec2 id = ivec2(floor( vec2( (1.0+st.x)/brickW, (1.0-st.y)/brickH) ));\n\n            vec3 bcol; vec2 bcen; float bglo;\n\n            float sha = 0.0;\n            for( int j=-1; j<=1; j++ )\n        \tfor( int i=-1; i<=1; i++ )\n        \t{\n                ivec2 idr = id + ivec2(i, j );\n                float alp = doBrick( idr, bcol, bglo, bcen );\n                float f = udRoundBox( st, bcen, 0.5*vec2(brickW,brickH)-b, b );\n                float s = 1.0 - smoothstep( -brickH*0.5, brickH*1.0, f ); \n                s = mix( 0.0, s, alp );\n                sha = max( sha, s );\n            }\n            col = mix( col, col*0.4, sha );\n        }\n    \n\n        ivec2 id = ivec2(floor( vec2( (1.0+uv.x)/brickW, (1.0-uv.y)/brickH) ));\n        \n        // shape\n        {\n            vec3 bcol; vec2 bcen; float bglo;\n            float alp = doBrick( id, bcol, bglo, bcen );\n            if( alp>0.0001 )\n            {\n                float f = udRoundBox( uv, bcen, 0.5*vec2(brickW,brickH)-b, b );\n                bglo  += 0.6*smoothstep( -4.0*px, 0.0, f );\n\n                bcol *= 0.7 + 0.3*smoothstep( -4.0*px, -2.0*px, f );\n                bcol *= 0.5 + 1.7*bglo;\n                col = mix( col, bcol, alp*(1.0-smoothstep( -px, px, f )) );\n            }\n        }\n        \n        // gather glow\n        for( int j=-1; j<=1; j++ )\n        for( int i=-1; i<=1; i++ )\n        {\n            ivec2 idr = id + ivec2(i, j );\n            vec3 bcol = vec3(0.0); vec2 bcen; float bglo;\n            float alp = doBrick( idr, bcol, bglo, bcen );\n            float f = udRoundBox( uv, bcen, 0.5*vec2(brickW,brickH)-b, b );\n            emi += bcol*bglo*exp(-600.0*f*f);\n        }\n    }    \n    \n    \n    // ball \n    {\n        float hit = exp(-4.0*(iTime-lastHit.y) );\n\n        // shadow\n        float f = 1.0-smoothstep( ballRadius*0.5, ballRadius*2.0, length( uv - ballPos + shadowOffset ) );\n        col = mix( col, col*0.4, f );\n\n        // shape\n        f = length( uv - ballPos ) - ballRadius;\n        vec3 bcol = vec3(1.0,0.6,0.2);\n        bcol *= 1.0 + 0.7*smoothstep( -3.0*px, -1.0*px, f );\n        bcol *= 0.7 + 0.3*hit;\n        col = mix( col, bcol, 1.0-smoothstep( 0.0, px, f ) );\n        \n        emi  += bcol*0.75*hit*exp(-500.0*f*f );\n    }\n    \n    \n    // paddle\n    {\n        float hit = exp(-4.0*(iTime-lastHit.x) ) * sin(20.0*(iTime-lastHit.x));\n        float hit2 = exp(-4.0*(iTime-lastHit.x) );\n        float y = uv.y + 0.04*hit * (1.0-pow(abs(uv.x-paddlePos)/(paddleSize*0.5),2.0));\n\n        // shadow\n        float f = udHorizontalSegment( vec2(uv.x,y)+shadowOffset, paddlePos-paddleSize*0.5,paddlePos+paddleSize*0.5,paddlePosY );\n        f = 1.0-smoothstep( paddleWidth*0.5*0.5, paddleWidth*0.5*2.0, f );\n        col = mix( col, col*0.4, f );\n\n        // shape\n        f = udHorizontalSegment( vec2(uv.x,y), paddlePos-paddleSize*0.5, paddlePos+paddleSize*0.5,paddlePosY ) - paddleWidth*0.5;\n        vec3 bcol = vec3(1.0,0.6,0.2);\n        bcol *= 1.0 + 0.7*smoothstep( -3.0*px, -1.0*px, f );\n        bcol *= 0.7 + 0.3*hit2;\n        col = mix( col, bcol, 1.0-smoothstep( -px, px, f ) );\n        emi  += bcol*0.75*hit2*exp( -500.0*f*f );\n\n    }\n\n    \n    // borders\n    {\n        float f = abs(abs(uv.x)-1.02);\n        f = min( f, udHorizontalSegment(uv,-1.0,1.0,1.0) );\n        f *= 2.0;\n        float a = 0.8 + 0.2*sin(2.6*iTime) + 0.1*sin(4.0*iTime);\n        float hit  = exp(-4.0*(iTime-lastHit.z) );\n        //\n        a *= 1.0-0.3*hit;\n        col += a*0.5*vec3(0.6,0.30,0.1)*exp(- 30.0*f*f);\n        col += a*0.5*vec3(0.6,0.35,0.2)*exp(-150.0*f*f);\n        col += a*1.7*vec3(0.6,0.50,0.3)*exp(-900.0*f*f);\n    }\n    \n    // score\n    {\n        float f = float(PrintInt( (uv-vec2(-1.5,0.8))*10.0, int(points) ));\n        col = mix( col, vec3(1.0,1.0,1.0), f );\n    }\n    \n    \n    // add emmission\n    col += emi;\n    \n\n    //------------------------\n    // game over\n    //------------------------\n    col = mix( col, vec3(1.0,0.5,0.2), state * (0.5+0.5*sin(30.0*iTime)) );\n\n    fragColor = vec4(col,1.0);\n}\n","type":"Image"},{"class":"GLSLShader","name":"Buffer A","source":"// Created by inigo quilez - iq/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n\n//\n// Gameplay computation.\n//\n// The gameplay buffer is 14x14 pixels. The whole game is run/played for each one of these\n// pixels. A filter in the end of the shader takes only the bit  of infomration that needs \n// to be stored in each texl of the game-logic texture.\n\n// storage register/texel addresses\nconst ivec2 txBallPosVel = ivec2(0,0);\nconst ivec2 txPaddlePos  = ivec2(1,0);\nconst ivec2 txPoints     = ivec2(2,0);\nconst ivec2 txState      = ivec2(3,0);\nconst ivec2 txLastHit    = ivec2(4,0);\nconst ivec4 txBricks     = ivec4(0,1,13,12);\n\nconst float ballRadius = 0.035;\nconst float paddleSize = 0.30;\nconst float paddleWidth = 0.06;\nconst float paddlePosY  = -0.90;\nconst float brickW = 2.0/13.0;\nconst float brickH = 1.0/15.0;\n\nconst float gameSpeed =  3.0;\nconst float inputSpeed = 2.0;\n\nconst int KEY_SPACE = 32;\nconst int KEY_LEFT  = 37;\nconst int KEY_RIGHT = 39;\n\n//----------------------------------------------------------------------------------------------\n\nfloat hash1( float n ) { return fract(sin(n)*138.5453123); }\n\n// intersect a disk sweept in a linear segment with a line/plane. \nfloat iPlane( in vec2 ro, in vec2 rd, float rad, vec3 pla )\n{\n    float a = dot( rd, pla.xy );\n    if( a>0.0 ) return -1.0;\n    float t = (rad - pla.z - dot(ro,pla.xy)) / a;\n    if( t>=1.0 ) t=-1.0;\n    return t;\n}\n\n// intersect a disk sweept in a linear segment with a box \nvec3 iBox( in vec2 ro, in vec2 rd, in float rad, in vec2 bce, in vec2 bwi ) \n{\n    vec2 m = 1.0/rd;\n    vec2 n = m*(ro - bce);\n    vec2 k = abs(m)*(bwi+rad);\n    vec2 t1 = -n - k;\n    vec2 t2 = -n + k;\n\tfloat tN = max( t1.x, t1.y );\n\tfloat tF = min( t2.x, t2.y );\n\tif( tN > tF || tF < 0.0) return vec3(-1.0);\n    if( tN>=1.0 ) return vec3(-1.0);\n\tvec2 nor = -sign(rd)*step(t1.yx,t1.xy);\n\treturn vec3( tN, nor );\n}\n\n//----------------------------------------------------------------------------------------------\n\nvec4 loadValue( in ivec2 re )\n{\n    return texelFetch( iChannel0, re, 0 );\n}\nvoid storeValue( in ivec2 re, in vec4 va, inout vec4 fragColor, in ivec2 p )\n{\n    fragColor = (p==re) ? va : fragColor;\n}\nvoid storeValue( in ivec4 re, in vec4 va, inout vec4 fragColor, in ivec2 p )\n{\n    fragColor = ( p.x>=re.x && p.y>=re.y && p.x<=re.z && p.y<=re.w ) ? va : fragColor;\n}\n\n//----------------------------------------------------------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 ipx = ivec2(fragCoord-0.5);\n \n    // don't compute gameplay outside of the data area\n    if( fragCoord.x > 14.0 || fragCoord.y>14.0 ) discard;\n    \n    //---------------------------------------------------------------------------------   \n\t// load game state\n\t//---------------------------------------------------------------------------------\n    vec4  balPosVel = loadValue( txBallPosVel );\n    float paddlePos = loadValue( txPaddlePos ).x;\n    float points    = loadValue( txPoints ).x;\n    float state     = loadValue( txState ).x;\n    vec3  lastHit   = loadValue( txLastHit ).xyz;        // paddle, brick, wall\n    vec2  brick     = loadValue( ipx ).xy;               // visible, hittime\n\t\n    //---------------------------------------------------------------------------------\n    // reset\n\t//---------------------------------------------------------------------------------\n\tif( iFrame==0 ) state = -1.0;\n\t\n    if( state < -0.5 )\n    {\n        state = 0.0;\n        balPosVel = vec4(0.0,paddlePosY+ballRadius+paddleWidth*0.5+0.001, 0.6,1.0);\n        paddlePos = 0.0;\n        points = 0.0;\n        state = 0.0;\n        brick = vec2(1.0,-5.0);\n        lastHit = vec3(-1.0);\n        \n        \n        if( fragCoord.x<1.0 || fragCoord.x>12.0 )\n        {\n            brick.x = 0.0;\n            brick.y = -10.0;\n        }\n        \n\n    }\n\n    //---------------------------------------------------------------------------------\n    // do game\n    //---------------------------------------------------------------------------------\n\n    // game over (or won), wait for space key press to resume\n    if( state > 0.5 )\n    {\n        float pressSpace = texelFetch( iChannel1, ivec2(KEY_SPACE,0.0), 0 ).x;\n        if( pressSpace>0.5 )\n        {\n            state = -1.0;\n        }\n    }\n    \n    // if game mode (not game over), play game\n    else if( state < 0.5 ) \n\t{\n\n        //-------------------\n        // paddle\n        //-------------------\n        float oldPaddlePos = paddlePos;\n        if( iMouse.w>0.01 )\n        {\n            // move with mouse\n            paddlePos = (-1.0 + 2.0*iMouse.x/iResolution.x)*iResolution.x/iResolution.y;\n        }\n        else\n        {\n            // move with keyboard\n            float moveRight = texelFetch( iChannel1, ivec2(KEY_RIGHT,0), 0 ).x;\n            float moveLeft  = texelFetch( iChannel1, ivec2(KEY_LEFT,0), 0 ).x;\n            paddlePos += 0.02*inputSpeed*(moveRight - moveLeft);\n        }\n        paddlePos = clamp( paddlePos, -1.0+0.5*paddleSize+paddleWidth*0.5, 1.0-0.5*paddleSize-paddleWidth*0.5 );\n\n        float moveTotal = sign( paddlePos - oldPaddlePos );\n\n        //-------------------\n        // ball\n\t\t//-------------------\n        float dis = 0.01*gameSpeed*(iTimeDelta*60.0);\n        \n        // do up to 3 sweep collision detections (usually 0 or 1 will happen only)\n        for( int j=0; j<3; j++ )\n        {\n            ivec3 oid = ivec3(-1);\n            vec2 nor;\n            float t = 1000.0;\n\n            // test walls\n            const vec3 pla1 = vec3(-1.0, 0.0,1.0 ); \n            const vec3 pla2 = vec3( 1.0, 0.0,1.0 ); \n            const vec3 pla3 = vec3( 0.0,-1.0,1.0 ); \n            float t1 = iPlane( balPosVel.xy, dis*balPosVel.zw, ballRadius, pla1 ); if( t1>0.0         ) { t=t1; nor = pla1.xy; oid.x=1; }\n            float t2 = iPlane( balPosVel.xy, dis*balPosVel.zw, ballRadius, pla2 ); if( t2>0.0 && t2<t ) { t=t2; nor = pla2.xy; oid.x=2; }\n            float t3 = iPlane( balPosVel.xy, dis*balPosVel.zw, ballRadius, pla3 ); if( t3>0.0 && t3<t ) { t=t3; nor = pla3.xy; oid.x=3; }\n            \n            // test paddle\n            vec3  t4 = iBox( balPosVel.xy, dis*balPosVel.zw, ballRadius, vec2(paddlePos,paddlePosY), vec2(paddleSize*0.5,paddleWidth*0.5) );\n            if( t4.x>0.0 && t4.x<t ) { t=t4.x; nor = t4.yz; oid.x=4;  }\n            \n            // test bricks\n            ivec2 idr = ivec2(floor( vec2( (1.0+balPosVel.x)/brickW, (1.0-balPosVel.y)/brickH) ));\n            ivec2 vs = ivec2(sign(balPosVel.zw));\n            for( int j=0; j<3; j++ )\n            for( int i=0; i<3; i++ )\n            {\n                ivec2 id = idr + ivec2( vs.x*i,-vs.y*j);\n                if( id.x>=0 && id.x<13 && id.y>=0 && id.y<12 )\n                {\n                    float brickHere = texelFetch( iChannel0, (txBricks.xy+id), 0 ).x;\n                    if( brickHere>0.5 )\n                    {\n                        vec2 ce = vec2( -1.0 + float(id.x)*brickW + 0.5*brickW,\n                                         1.0 - float(id.y)*brickH - 0.5*brickH );\n                        vec3 t5 = iBox( balPosVel.xy, dis*balPosVel.zw, ballRadius, ce, 0.5*vec2(brickW,brickH) );\n                        if( t5.x>0.0 && t5.x<t )\n                        {\n                            oid = ivec3(5,id);\n                            t = t5.x;\n                            nor = t5.yz;\n                        }\n                    }\n                }\n            }\n    \n            // no collisions\n            if( oid.x<0 ) break;\n\n            \n            // bounce\n            balPosVel.xy += t*dis*balPosVel.zw;\n            dis *= 1.0-t;\n            \n            // did hit walls\n            if( oid.x<4 )\n            {\n                balPosVel.zw = reflect( balPosVel.zw, nor );\n                lastHit.z = iTime;\n            }\n            // did hit paddle\n            else if( oid.x<5 )\n            {\n                balPosVel.zw = reflect( balPosVel.zw, nor );\n                // borders bounce back\n                     if( balPosVel.x > (paddlePos+paddleSize*0.5) ) balPosVel.z =  abs(balPosVel.z);\n                else if( balPosVel.x < (paddlePos-paddleSize*0.5) ) balPosVel.z = -abs(balPosVel.z);\n                balPosVel.z += 0.37*moveTotal;\n                balPosVel.z += 0.11*hash1( float(iFrame)*7.1 );\n                balPosVel.z = clamp( balPosVel.z, -0.9, 0.9 );\n                balPosVel.zw = normalize(balPosVel.zw);\n                \n                // \n                lastHit.x = iTime;\n                lastHit.y = iTime;\n            }\n            // did hit a brick\n            else if( oid.x<6 )\n            {\n                balPosVel.zw = reflect( balPosVel.zw, nor );\n                lastHit.y = iTime;\n                points += 1.0;\n                if( points>131.5 )\n                {\n                    state = 2.0; // won game!\n                }\n\n                if( ipx == txBricks.xy+oid.yz )\n                {\n                    brick = vec2(0.0, iTime);\n                }\n            }\n        }\n        \n        balPosVel.xy += dis*balPosVel.zw;\n        \n        // detect miss\n        if( balPosVel.y<-1.0 )\n        {\n            state = 1.0; // game over\n        }\n    }\n    \n\t//---------------------------------------------------------------------------------\n\t// store game state\n\t//---------------------------------------------------------------------------------\n    fragColor = vec4(0.0);\n    \n \n    storeValue( txBallPosVel, vec4(balPosVel),             fragColor, ipx );\n    storeValue( txPaddlePos,  vec4(paddlePos,0.0,0.0,0.0), fragColor, ipx );\n    storeValue( txPoints,     vec4(points,0.0,0.0,0.0),    fragColor, ipx );\n    storeValue( txState,      vec4(state,0.0,0.0,0.0),     fragColor, ipx );\n    storeValue( txLastHit,    vec4(lastHit,0.0),           fragColor, ipx );\n    storeValue( txBricks,     vec4(brick,0.0,0.0),         fragColor, ipx );\n}\n","type":"Image"},{"class":"Keyboard","name":"Keyboard"},{"class":"LastFrame","name":"LastFrame","ref":"Buffer A","type":"Image"}]}